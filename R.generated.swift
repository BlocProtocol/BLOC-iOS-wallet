//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `RobotoCondensed-Bold.ttf`.
    static let robotoCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Bold", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Light.ttf`.
    static let robotoCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Light", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Regular.ttf`.
    static let robotoCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Regular", pathExtension: "ttf")
    /// Resource file `ani.gif`.
    static let aniGif = Rswift.FileResource(bundle: R.hostingBundle, name: "ani", pathExtension: "gif")
    /// Resource file `intro.mov`.
    static let introMov = Rswift.FileResource(bundle: R.hostingBundle, name: "intro", pathExtension: "mov")
    /// Resource file `loop.mov`.
    static let loopMov = Rswift.FileResource(bundle: R.hostingBundle, name: "loop", pathExtension: "mov")
    /// Resource file `outro.gif`.
    static let outroGif = Rswift.FileResource(bundle: R.hostingBundle, name: "outro", pathExtension: "gif")
    
    /// `bundle.url(forResource: "RobotoCondensed-Bold", withExtension: "ttf")`
    static func robotoCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Light", withExtension: "ttf")`
    static func robotoCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Regular", withExtension: "ttf")`
    static func robotoCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ani", withExtension: "gif")`
    static func aniGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aniGif
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "intro", withExtension: "mov")`
    static func introMov(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.introMov
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "loop", withExtension: "mov")`
    static func loopMov(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loopMov
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "outro", withExtension: "gif")`
    static func outroGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outroGif
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `RobotoCondensed-Bold`.
    static let robotoCondensedBold = Rswift.FontResource(fontName: "RobotoCondensed-Bold")
    /// Font `RobotoCondensed-Light`.
    static let robotoCondensedLight = Rswift.FontResource(fontName: "RobotoCondensed-Light")
    /// Font `RobotoCondensed-Regular`.
    static let robotoCondensedRegular = Rswift.FontResource(fontName: "RobotoCondensed-Regular")
    
    /// `UIFont(name: "RobotoCondensed-Bold", size: ...)`
    static func robotoCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedBold, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Light", size: ...)`
    static func robotoCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedLight, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Regular", size: ...)`
    static func robotoCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Regular' could not be loaded, is 'RobotoCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Bold' could not be loaded, is 'RobotoCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Light' could not be loaded, is 'RobotoCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 56 images.
  struct image {
    /// Image `about-logo`.
    static let aboutLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-logo")
    /// Image `about-us-bg`.
    static let aboutUsBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-us-bg")
    /// Image `accessory`.
    static let accessory = Rswift.ImageResource(bundle: R.hostingBundle, name: "accessory")
    /// Image `action-button-bg`.
    static let actionButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "action-button-bg")
    /// Image `add-icon`.
    static let addIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-icon")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `ani.gif`.
    static let aniGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ani.gif")
    /// Image `bottom-arrow`.
    static let bottomArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom-arrow")
    /// Image `checkmark-small`.
    static let checkmarkSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark-small")
    /// Image `default-bg`.
    static let defaultBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "default-bg")
    /// Image `dot-bg`.
    static let dotBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "dot-bg")
    /// Image `explorer-border`.
    static let explorerBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "explorer-border")
    /// Image `explorer-icon`.
    static let explorerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "explorer-icon")
    /// Image `home-bg`.
    static let homeBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-bg")
    /// Image `left-arrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "left-arrow")
    /// Image `logo-small`.
    static let logoSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-small")
    /// Image `logo-text`.
    static let logoText = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-text")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `menu-icon`.
    static let menuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-icon")
    /// Image `mining-bg`.
    static let miningBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mining-bg")
    /// Image `mining-dot-inactive`.
    static let miningDotInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "mining-dot-inactive")
    /// Image `mining-dot-off-active`.
    static let miningDotOffActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "mining-dot-off-active")
    /// Image `mining-dot-on-active`.
    static let miningDotOnActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "mining-dot-on-active")
    /// Image `nav-bar-bg`.
    static let navBarBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav-bar-bg")
    /// Image `nav-bar-transparent-bg`.
    static let navBarTransparentBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav-bar-transparent-bg")
    /// Image `outro.gif`.
    static let outroGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "outro.gif")
    /// Image `qr-code-small`.
    static let qrCodeSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr-code-small")
    /// Image `received-small`.
    static let receivedSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "received-small")
    /// Image `right-arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow")
    /// Image `sent-small`.
    static let sentSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "sent-small")
    /// Image `separator-dash`.
    static let separatorDash = Rswift.ImageResource(bundle: R.hostingBundle, name: "separator-dash")
    /// Image `settings-icon`.
    static let settingsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-icon")
    /// Image `splash_bg`.
    static let splash_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_bg")
    /// Image `splash_logo`.
    static let splash_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_logo")
    /// Image `switch-bg-off`.
    static let switchBgOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch-bg-off")
    /// Image `switch-bg-on`.
    static let switchBgOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch-bg-on")
    /// Image `switch-button-bg`.
    static let switchButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch-button-bg")
    /// Image `switch-button-off`.
    static let switchButtonOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch-button-off")
    /// Image `switch-button-on`.
    static let switchButtonOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch-button-on")
    /// Image `tab-bar-about`.
    static let tabBarAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-about")
    /// Image `tab-bar-bg`.
    static let tabBarBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-bg")
    /// Image `tab-bar-marker`.
    static let tabBarMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-marker")
    /// Image `tab-bar-mining`.
    static let tabBarMining = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-mining")
    /// Image `tab-bar-send`.
    static let tabBarSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-send")
    /// Image `tab-bar-transactions`.
    static let tabBarTransactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-transactions")
    /// Image `tab-bar-wallet`.
    static let tabBarWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-wallet")
    /// Image `top-arrow`.
    static let topArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-arrow")
    /// Image `transaction_error`.
    static let transaction_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_error")
    /// Image `transaction_success`.
    static let transaction_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_success")
    /// Image `wallet-balance`.
    static let walletBalance = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-balance")
    /// Image `wallet-export-keys`.
    static let walletExportKeys = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-export-keys")
    /// Image `wallet-key`.
    static let walletKey = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-key")
    /// Image `wallet-medium`.
    static let walletMedium = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-medium")
    /// Image `wallet-transactions`.
    static let walletTransactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-transactions")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `waves-bg`.
    static let wavesBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "waves-bg")
    
    /// `UIImage(named: "about-logo", bundle: ..., traitCollection: ...)`
    static func aboutLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about-us-bg", bundle: ..., traitCollection: ...)`
    static func aboutUsBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutUsBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "accessory", bundle: ..., traitCollection: ...)`
    static func accessory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accessory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "action-button-bg", bundle: ..., traitCollection: ...)`
    static func actionButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.actionButtonBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add-icon", bundle: ..., traitCollection: ...)`
    static func addIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ani.gif", bundle: ..., traitCollection: ...)`
    static func aniGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aniGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom-arrow", bundle: ..., traitCollection: ...)`
    static func bottomArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottomArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark-small", bundle: ..., traitCollection: ...)`
    static func checkmarkSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmarkSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default-bg", bundle: ..., traitCollection: ...)`
    static func defaultBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dot-bg", bundle: ..., traitCollection: ...)`
    static func dotBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "explorer-border", bundle: ..., traitCollection: ...)`
    static func explorerBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explorerBorder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "explorer-icon", bundle: ..., traitCollection: ...)`
    static func explorerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explorerIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home-bg", bundle: ..., traitCollection: ...)`
    static func homeBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "left-arrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-small", bundle: ..., traitCollection: ...)`
    static func logoSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-text", bundle: ..., traitCollection: ...)`
    static func logoText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoText, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu-icon", bundle: ..., traitCollection: ...)`
    static func menuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mining-bg", bundle: ..., traitCollection: ...)`
    static func miningBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.miningBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mining-dot-inactive", bundle: ..., traitCollection: ...)`
    static func miningDotInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.miningDotInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mining-dot-off-active", bundle: ..., traitCollection: ...)`
    static func miningDotOffActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.miningDotOffActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mining-dot-on-active", bundle: ..., traitCollection: ...)`
    static func miningDotOnActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.miningDotOnActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav-bar-bg", bundle: ..., traitCollection: ...)`
    static func navBarBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navBarBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav-bar-transparent-bg", bundle: ..., traitCollection: ...)`
    static func navBarTransparentBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navBarTransparentBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "outro.gif", bundle: ..., traitCollection: ...)`
    static func outroGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outroGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr-code-small", bundle: ..., traitCollection: ...)`
    static func qrCodeSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCodeSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "received-small", bundle: ..., traitCollection: ...)`
    static func receivedSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receivedSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right-arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sent-small", bundle: ..., traitCollection: ...)`
    static func sentSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sentSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "separator-dash", bundle: ..., traitCollection: ...)`
    static func separatorDash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.separatorDash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings-icon", bundle: ..., traitCollection: ...)`
    static func settingsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_bg", bundle: ..., traitCollection: ...)`
    static func splash_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_logo", bundle: ..., traitCollection: ...)`
    static func splash_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch-bg-off", bundle: ..., traitCollection: ...)`
    static func switchBgOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchBgOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch-bg-on", bundle: ..., traitCollection: ...)`
    static func switchBgOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchBgOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch-button-bg", bundle: ..., traitCollection: ...)`
    static func switchButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchButtonBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch-button-off", bundle: ..., traitCollection: ...)`
    static func switchButtonOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchButtonOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch-button-on", bundle: ..., traitCollection: ...)`
    static func switchButtonOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchButtonOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-about", bundle: ..., traitCollection: ...)`
    static func tabBarAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-bg", bundle: ..., traitCollection: ...)`
    static func tabBarBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-marker", bundle: ..., traitCollection: ...)`
    static func tabBarMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-mining", bundle: ..., traitCollection: ...)`
    static func tabBarMining(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarMining, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-send", bundle: ..., traitCollection: ...)`
    static func tabBarSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-transactions", bundle: ..., traitCollection: ...)`
    static func tabBarTransactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarTransactions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-wallet", bundle: ..., traitCollection: ...)`
    static func tabBarWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarWallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "top-arrow", bundle: ..., traitCollection: ...)`
    static func topArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_error", bundle: ..., traitCollection: ...)`
    static func transaction_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_success", bundle: ..., traitCollection: ...)`
    static func transaction_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet-balance", bundle: ..., traitCollection: ...)`
    static func walletBalance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletBalance, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet-export-keys", bundle: ..., traitCollection: ...)`
    static func walletExportKeys(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletExportKeys, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet-key", bundle: ..., traitCollection: ...)`
    static func walletKey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletKey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet-medium", bundle: ..., traitCollection: ...)`
    static func walletMedium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletMedium, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet-transactions", bundle: ..., traitCollection: ...)`
    static func walletTransactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletTransactions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "waves-bg", bundle: ..., traitCollection: ...)`
    static func wavesBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wavesBg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 108 localization keys.
    struct localizable {
      /// en translation: (BLOC)
      /// 
      /// Locales: en
      static let about_us_bloc = Rswift.StringResource(key: "about_us_bloc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: A problem has occured!
      /// 
      /// Locales: en
      static let send_error_title = Rswift.StringResource(key: "send_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en
      static let home_menu_about_title = Rswift.StringResource(key: "home_menu_about_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Address copied
      /// 
      /// Locales: en
      static let wallet_address_copied = Rswift.StringResource(key: "wallet_address_copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Amount: %@
      /// 
      /// Locales: en
      static let transaction_details_amount = Rswift.StringResource(key: "transaction_details_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: An unknown error has occured. Please try again.
      /// 
      /// Locales: en
      static let error_unknown = Rswift.StringResource(key: "error_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Anonymity: 10 (very anonymous)
      /// 
      /// Locales: en
      static let send_anonymity = Rswift.StringResource(key: "send_anonymity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BACKUP YOUR KEY (below)
      /// 
      /// Locales: en
      static let wallet_created_title_second_line = Rswift.StringResource(key: "wallet_created_title_second_line", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BLOC - TO
      /// 
      /// Locales: en
      static let send_confirm_subtitle = Rswift.StringResource(key: "send_confirm_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BLOC available
      /// 
      /// Locales: en
      static let wallet_bloc_available = Rswift.StringResource(key: "wallet_bloc_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BLOC locked
      /// 
      /// Locales: en
      static let wallet_bloc_locked = Rswift.StringResource(key: "wallet_bloc_locked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Block height: %@
      /// 
      /// Locales: en
      static let transaction_details_block_height = Rswift.StringResource(key: "transaction_details_block_height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let common_cancel = Rswift.StringResource(key: "common_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copied
      /// 
      /// Locales: en
      static let wallet_keys_copied = Rswift.StringResource(key: "wallet_keys_copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en
      static let wallet_keys_copy = Rswift.StringResource(key: "wallet_keys_copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create a new wallet
      /// 
      /// Locales: en
      static let create_wallet_alert_create = Rswift.StringResource(key: "create_wallet_alert_create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create a new wallet
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_create = Rswift.StringResource(key: "wallet_list_no_wallet_create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Creating your wallet...
      /// 
      /// Locales: en
      static let create_wallet_loading = Rswift.StringResource(key: "create_wallet_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Current balance: %@
      /// 
      /// Locales: en
      static let mining_wallet_value = Rswift.StringResource(key: "mining_wallet_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Current pool: %@
      /// 
      /// Locales: en
      static let mining_mining_pool_value = Rswift.StringResource(key: "mining_mining_pool_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Current settings: %@
      /// 
      /// Locales: en
      static let mining_number_of_threads_value = Rswift.StringResource(key: "mining_number_of_threads_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Date: %@
      /// 
      /// Locales: en
      static let transaction_details_date = Rswift.StringResource(key: "transaction_details_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en
      static let transaction_details_nav = Rswift.StringResource(key: "transaction_details_nav", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do not store it on your smartphone, tablet, or computer. You are the sole responsible for the security of this key. Note: the key does not contain spaces.
      /// 
      /// Locales: en
      static let wallet_created_infos_last_line = Rswift.StringResource(key: "wallet_created_infos_last_line", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter the amount of BLOC you want to send
      /// 
      /// Locales: en
      static let send_amount_title = Rswift.StringResource(key: "send_amount_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fee for this transaction: %@
      /// 
      /// Locales: en
      static let send_confirm_fee = Rswift.StringResource(key: "send_confirm_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fee: %@
      /// 
      /// Locales: en
      static let transaction_details_fee = Rswift.StringResource(key: "transaction_details_fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fees for this transactions: %@
      /// 
      /// Locales: en
      static let send_amount_fees = Rswift.StringResource(key: "send_amount_fees", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: From:
      /// 
      /// Locales: en
      static let transaction_details_from = Rswift.StringResource(key: "transaction_details_from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Go to your wallet
      /// 
      /// Locales: en
      static let wallet_created_go_to_wallet = Rswift.StringResource(key: "wallet_created_go_to_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: High
      /// 
      /// Locales: en
      static let mining_number_of_threads_high = Rswift.StringResource(key: "mining_number_of_threads_high", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import a wallet (using QR code)
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_import_qr_code = Rswift.StringResource(key: "wallet_list_no_wallet_import_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import a wallet (using a QR code)
      /// 
      /// Locales: en
      static let create_wallet_alert_import_qr = Rswift.StringResource(key: "create_wallet_alert_import_qr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import a wallet (using a private key)
      /// 
      /// Locales: en
      static let create_wallet_alert_import_key = Rswift.StringResource(key: "create_wallet_alert_import_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import a wallet (using private key)
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_import_key = Rswift.StringResource(key: "wallet_list_no_wallet_import_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Importing your wallet...
      /// 
      /// Locales: en
      static let import_wallet_loading = Rswift.StringResource(key: "import_wallet_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Intense
      /// 
      /// Locales: en
      static let mining_number_of_threads_intense = Rswift.StringResource(key: "mining_number_of_threads_intense", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Low
      /// 
      /// Locales: en
      static let mining_number_of_threads_low = Rswift.StringResource(key: "mining_number_of_threads_low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Medium
      /// 
      /// Locales: en
      static let mining_number_of_threads_medium = Rswift.StringResource(key: "mining_number_of_threads_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Meet the Blockchain Coin
      /// 
      /// Locales: en
      static let about_us_meet = Rswift.StringResource(key: "about_us_meet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mining
      /// 
      /// Locales: en
      static let home_menu_mining_title = Rswift.StringResource(key: "home_menu_mining_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mining
      /// 
      /// Locales: en
      static let tabs_mining = Rswift.StringResource(key: "tabs_mining", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mining pool
      /// 
      /// Locales: en
      static let mining_mining_pool_title = Rswift.StringResource(key: "mining_mining_pool_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mining wallet: %@
      /// 
      /// Locales: en
      static let mining_wallet_title = Rswift.StringResource(key: "mining_wallet_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name for this wallet
      /// 
      /// Locales: en
      static let password_name_placeholder = Rswift.StringResource(key: "password_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next step
      /// 
      /// Locales: en
      static let create_wallet_password_next = Rswift.StringResource(key: "create_wallet_password_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next step
      /// 
      /// Locales: en
      static let import_wallet_key_action = Rswift.StringResource(key: "import_wallet_key_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Number of threads
      /// 
      /// Locales: en
      static let mining_number_of_threads_title = Rswift.StringResource(key: "mining_number_of_threads_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Off
      /// 
      /// Locales: en
      static let mining_off = Rswift.StringResource(key: "mining_off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let common_ok = Rswift.StringResource(key: "common_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: On
      /// 
      /// Locales: en
      static let mining_on = Rswift.StringResource(key: "mining_on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en
      static let create_wallet_password_placeholder = Rswift.StringResource(key: "create_wallet_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Paste here the address of the recipient
      /// 
      /// Locales: en
      static let send_paste_address = Rswift.StringResource(key: "send_paste_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment ID: %@
      /// 
      /// Locales: en
      static let transaction_details_payment_id = Rswift.StringResource(key: "transaction_details_payment_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter a name and a password for this wallet
      /// 
      /// Locales: en
      static let password_required_title = Rswift.StringResource(key: "password_required_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter your private key below
      /// 
      /// Locales: en
      static let import_wallet_key_title = Rswift.StringResource(key: "import_wallet_key_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please type a password for this new wallet
      /// 
      /// Locales: en
      static let create_wallet_password_title = Rswift.StringResource(key: "create_wallet_password_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Print the key
      /// 
      /// Locales: en
      static let wallet_created_print = Rswift.StringResource(key: "wallet_created_print", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: QR Code
      /// 
      /// Locales: en
      static let wallet_qr_code = Rswift.StringResource(key: "wallet_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Re-type your password
      /// 
      /// Locales: en
      static let create_wallet_password_bis_placeholder = Rswift.StringResource(key: "create_wallet_password_bis_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Received
      /// 
      /// Locales: en
      static let wallet_received = Rswift.StringResource(key: "wallet_received", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recent transactions
      /// 
      /// Locales: en
      static let wallet_recent_transactions = Rswift.StringResource(key: "wallet_recent_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recipient's address
      /// 
      /// Locales: en
      static let send_recipient_title = Rswift.StringResource(key: "send_recipient_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remember: some time is required for the network to confirm the transaction
      /// 
      /// Locales: en
      static let send_success_subtitle = Rswift.StringResource(key: "send_success_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Secure Private Decentralized Untraceable Fungible
      /// 
      /// Locales: en
      static let about_us_tagline = Rswift.StringResource(key: "about_us_tagline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: See full history
      /// 
      /// Locales: en
      static let wallet_full_history = Rswift.StringResource(key: "wallet_full_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: See the full transaction details on the Blockchain Coin Explorer
      /// 
      /// Locales: en
      static let transaction_details_explorer = Rswift.StringResource(key: "transaction_details_explorer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select the wallet to use for this transaction
      /// 
      /// Locales: en
      static let send_select_wallet = Rswift.StringResource(key: "send_select_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select the wallet you want to use while mining (the earned coins will be sent to this wallet)
      /// 
      /// Locales: en
      static let mining_select_wallet_title = Rswift.StringResource(key: "mining_select_wallet_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en
      static let home_menu_send_title = Rswift.StringResource(key: "home_menu_send_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en
      static let tabs_send = Rswift.StringResource(key: "tabs_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send the coins
      /// 
      /// Locales: en
      static let send_action = Rswift.StringResource(key: "send_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sending transaction...
      /// 
      /// Locales: en
      static let confirm_transaction_loading = Rswift.StringResource(key: "confirm_transaction_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sent
      /// 
      /// Locales: en
      static let wallet_sent = Rswift.StringResource(key: "wallet_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sent to:
      /// 
      /// Locales: en
      static let transaction_details_sent_to = Rswift.StringResource(key: "transaction_details_sent_to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Slide to confirm
      /// 
      /// Locales: en
      static let send_confirm_slide_to_confirm = Rswift.StringResource(key: "send_confirm_slide_to_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Status: %@
      /// 
      /// Locales: en
      static let transaction_details_status = Rswift.StringResource(key: "transaction_details_status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Summary
      /// 
      /// Locales: en
      static let send_confirm_title_view = Rswift.StringResource(key: "send_confirm_title_view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The BlockChain Coin has been founded in 2018 by a group of talented friends and partners that has been working together for more than 10 years on IT, smartphone technology, web, API, hardware products, applications and many more. Experimented, smart, ambitious, fun and hard working are some of our main qualities. We love cryptocurrencies, we are early bitcoin investors, we are (still) amazed by the possibilities that the Blockchain technology brings to the world and we want to be a fundamental actor of this revolution. Visit our website to discover our universe, our application, our ecostystem, our roadmap and be a part of it; join us!
      /// 
      /// Locales: en
      static let about_us_content = Rswift.StringResource(key: "about_us_content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The specified key is not in the right format or contains invalid data
      /// 
      /// Locales: en
      static let import_wallet_key_invalid_key = Rswift.StringResource(key: "import_wallet_key_invalid_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This password will be required each time you make a transaction with someone and to export your private key
      /// 
      /// Locales: en
      static let create_wallet_password_instructions = Rswift.StringResource(key: "create_wallet_password_instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Total balance
      /// 
      /// Locales: en
      static let wallet_total_balance = Rswift.StringResource(key: "wallet_total_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Total balance: %@
      /// 
      /// Locales: en
      static let wallet_list_item_balance = Rswift.StringResource(key: "wallet_list_item_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transact.
      /// 
      /// Locales: en
      static let tabs_transactions = Rswift.StringResource(key: "tabs_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transaction hash:
      /// 
      /// Locales: en
      static let transaction_details_hash = Rswift.StringResource(key: "transaction_details_hash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en
      static let home_menu_transactions_title = Rswift.StringResource(key: "home_menu_transactions_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transfers: %@
      /// 
      /// Locales: en
      static let transaction_details_transfers = Rswift.StringResource(key: "transaction_details_transfers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Use QR code
      /// 
      /// Locales: en
      static let send_use_qr_code = Rswift.StringResource(key: "send_use_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Very important
      /// 
      /// Locales: en
      static let wallet_created_title_third_line = Rswift.StringResource(key: "wallet_created_title_third_line", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en
      static let home_menu_wallet_title = Rswift.StringResource(key: "home_menu_wallet_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en
      static let tabs_wallet = Rswift.StringResource(key: "tabs_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet #%d
      /// 
      /// Locales: en
      static let wallet_list_item_title = Rswift.StringResource(key: "wallet_list_item_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You are going to send
      /// 
      /// Locales: en
      static let send_confirm_title = Rswift.StringResource(key: "send_confirm_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You don't any wallets with enough funds for this transaction
      /// 
      /// Locales: en
      static let send_no_wallet = Rswift.StringResource(key: "send_no_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have no wallet for now
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_title = Rswift.StringResource(key: "wallet_list_no_wallet_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You must understand that this private key is very sensitive. NEVER SHARE this with anyone. With this key, you can recover your wallet on any computer, smartphone or table. If someone finds or steals it, he will be able to recover your wallet and transfer funds out of it without your knowledge.  The best way to backup your wallet is to print on paper 2 copies of this key and hide them in 2 different safe places. If you lose this key and your wallet is deleted from this device, you will never be able to recover it. Your funds will be lost forever. This key is essential to backup your wallet and funds.
      /// 
      /// Locales: en
      static let wallet_created_infos = Rswift.StringResource(key: "wallet_created_infos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You need to create a new wallet or import a wallet using your private key or a QR code
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_instructions = Rswift.StringResource(key: "wallet_list_no_wallet_instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your Blockchain Coins has been sent!
      /// 
      /// Locales: en
      static let send_success_title = Rswift.StringResource(key: "send_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your address
      /// 
      /// Locales: en
      static let wallet_address = Rswift.StringResource(key: "wallet_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your key here
      /// 
      /// Locales: en
      static let import_wallet_key_placeholder = Rswift.StringResource(key: "import_wallet_key_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your wallet has been created!
      /// 
      /// Locales: en
      static let wallet_created_title_first_line = Rswift.StringResource(key: "wallet_created_title_first_line", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your wallet key below
      /// 
      /// Locales: en
      static let wallet_created_qr_code = Rswift.StringResource(key: "wallet_created_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: check every transactions
      /// 
      /// Locales: en
      static let home_menu_transactions_subtitle = Rswift.StringResource(key: "home_menu_transactions_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: create, configure, balance
      /// 
      /// Locales: en
      static let home_menu_wallet_subtitle = Rswift.StringResource(key: "home_menu_wallet_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: earn coins in minutes
      /// 
      /// Locales: en
      static let home_menu_mining_subtitle = Rswift.StringResource(key: "home_menu_mining_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: more about us
      /// 
      /// Locales: en
      static let home_menu_about_subtitle = Rswift.StringResource(key: "home_menu_about_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: send coins instantly
      /// 
      /// Locales: en
      static let home_menu_send_subtitle = Rswift.StringResource(key: "home_menu_send_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: www.blockchain-coin.net
      /// 
      /// Locales: en
      static let about_us_url = Rswift.StringResource(key: "about_us_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: (BLOC)
      /// 
      /// Locales: en
      static func about_us_bloc(_: Void = ()) -> String {
        return NSLocalizedString("about_us_bloc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: A problem has occured!
      /// 
      /// Locales: en
      static func send_error_title(_: Void = ()) -> String {
        return NSLocalizedString("send_error_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en
      static func home_menu_about_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_about_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address copied
      /// 
      /// Locales: en
      static func wallet_address_copied(_: Void = ()) -> String {
        return NSLocalizedString("wallet_address_copied", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount: %@
      /// 
      /// Locales: en
      static func transaction_details_amount(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_amount", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: An unknown error has occured. Please try again.
      /// 
      /// Locales: en
      static func error_unknown(_: Void = ()) -> String {
        return NSLocalizedString("error_unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Anonymity: 10 (very anonymous)
      /// 
      /// Locales: en
      static func send_anonymity(_: Void = ()) -> String {
        return NSLocalizedString("send_anonymity", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BACKUP YOUR KEY (below)
      /// 
      /// Locales: en
      static func wallet_created_title_second_line(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_title_second_line", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BLOC - TO
      /// 
      /// Locales: en
      static func send_confirm_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("send_confirm_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BLOC available
      /// 
      /// Locales: en
      static func wallet_bloc_available(_: Void = ()) -> String {
        return NSLocalizedString("wallet_bloc_available", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BLOC locked
      /// 
      /// Locales: en
      static func wallet_bloc_locked(_: Void = ()) -> String {
        return NSLocalizedString("wallet_bloc_locked", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block height: %@
      /// 
      /// Locales: en
      static func transaction_details_block_height(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_block_height", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func common_cancel(_: Void = ()) -> String {
        return NSLocalizedString("common_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copied
      /// 
      /// Locales: en
      static func wallet_keys_copied(_: Void = ()) -> String {
        return NSLocalizedString("wallet_keys_copied", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en
      static func wallet_keys_copy(_: Void = ()) -> String {
        return NSLocalizedString("wallet_keys_copy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a new wallet
      /// 
      /// Locales: en
      static func create_wallet_alert_create(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_alert_create", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a new wallet
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_create(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_create", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Creating your wallet...
      /// 
      /// Locales: en
      static func create_wallet_loading(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current balance: %@
      /// 
      /// Locales: en
      static func mining_wallet_value(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining_wallet_value", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Current pool: %@
      /// 
      /// Locales: en
      static func mining_mining_pool_value(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining_mining_pool_value", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Current settings: %@
      /// 
      /// Locales: en
      static func mining_number_of_threads_value(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining_number_of_threads_value", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Date: %@
      /// 
      /// Locales: en
      static func transaction_details_date(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_date", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Details
      /// 
      /// Locales: en
      static func transaction_details_nav(_: Void = ()) -> String {
        return NSLocalizedString("transaction_details_nav", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Do not store it on your smartphone, tablet, or computer. You are the sole responsible for the security of this key. Note: the key does not contain spaces.
      /// 
      /// Locales: en
      static func wallet_created_infos_last_line(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_infos_last_line", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the amount of BLOC you want to send
      /// 
      /// Locales: en
      static func send_amount_title(_: Void = ()) -> String {
        return NSLocalizedString("send_amount_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee for this transaction: %@
      /// 
      /// Locales: en
      static func send_confirm_fee(_ value1: String) -> String {
        return String(format: NSLocalizedString("send_confirm_fee", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Fee: %@
      /// 
      /// Locales: en
      static func transaction_details_fee(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_fee", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Fees for this transactions: %@
      /// 
      /// Locales: en
      static func send_amount_fees(_ value1: String) -> String {
        return String(format: NSLocalizedString("send_amount_fees", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: From:
      /// 
      /// Locales: en
      static func transaction_details_from(_: Void = ()) -> String {
        return NSLocalizedString("transaction_details_from", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go to your wallet
      /// 
      /// Locales: en
      static func wallet_created_go_to_wallet(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_go_to_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: High
      /// 
      /// Locales: en
      static func mining_number_of_threads_high(_: Void = ()) -> String {
        return NSLocalizedString("mining_number_of_threads_high", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import a wallet (using QR code)
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_import_qr_code(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_import_qr_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import a wallet (using a QR code)
      /// 
      /// Locales: en
      static func create_wallet_alert_import_qr(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_alert_import_qr", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import a wallet (using a private key)
      /// 
      /// Locales: en
      static func create_wallet_alert_import_key(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_alert_import_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import a wallet (using private key)
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_import_key(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_import_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Importing your wallet...
      /// 
      /// Locales: en
      static func import_wallet_loading(_: Void = ()) -> String {
        return NSLocalizedString("import_wallet_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Intense
      /// 
      /// Locales: en
      static func mining_number_of_threads_intense(_: Void = ()) -> String {
        return NSLocalizedString("mining_number_of_threads_intense", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Low
      /// 
      /// Locales: en
      static func mining_number_of_threads_low(_: Void = ()) -> String {
        return NSLocalizedString("mining_number_of_threads_low", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Medium
      /// 
      /// Locales: en
      static func mining_number_of_threads_medium(_: Void = ()) -> String {
        return NSLocalizedString("mining_number_of_threads_medium", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Meet the Blockchain Coin
      /// 
      /// Locales: en
      static func about_us_meet(_: Void = ()) -> String {
        return NSLocalizedString("about_us_meet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining
      /// 
      /// Locales: en
      static func home_menu_mining_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_mining_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining
      /// 
      /// Locales: en
      static func tabs_mining(_: Void = ()) -> String {
        return NSLocalizedString("tabs_mining", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining pool
      /// 
      /// Locales: en
      static func mining_mining_pool_title(_: Void = ()) -> String {
        return NSLocalizedString("mining_mining_pool_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining wallet: %@
      /// 
      /// Locales: en
      static func mining_wallet_title(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining_wallet_title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Name for this wallet
      /// 
      /// Locales: en
      static func password_name_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("password_name_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next step
      /// 
      /// Locales: en
      static func create_wallet_password_next(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_password_next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next step
      /// 
      /// Locales: en
      static func import_wallet_key_action(_: Void = ()) -> String {
        return NSLocalizedString("import_wallet_key_action", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Number of threads
      /// 
      /// Locales: en
      static func mining_number_of_threads_title(_: Void = ()) -> String {
        return NSLocalizedString("mining_number_of_threads_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Off
      /// 
      /// Locales: en
      static func mining_off(_: Void = ()) -> String {
        return NSLocalizedString("mining_off", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func common_ok(_: Void = ()) -> String {
        return NSLocalizedString("common_ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: On
      /// 
      /// Locales: en
      static func mining_on(_: Void = ()) -> String {
        return NSLocalizedString("mining_on", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en
      static func create_wallet_password_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_password_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Paste here the address of the recipient
      /// 
      /// Locales: en
      static func send_paste_address(_: Void = ()) -> String {
        return NSLocalizedString("send_paste_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment ID: %@
      /// 
      /// Locales: en
      static func transaction_details_payment_id(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_payment_id", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please enter a name and a password for this wallet
      /// 
      /// Locales: en
      static func password_required_title(_: Void = ()) -> String {
        return NSLocalizedString("password_required_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter your private key below
      /// 
      /// Locales: en
      static func import_wallet_key_title(_: Void = ()) -> String {
        return NSLocalizedString("import_wallet_key_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please type a password for this new wallet
      /// 
      /// Locales: en
      static func create_wallet_password_title(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_password_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Print the key
      /// 
      /// Locales: en
      static func wallet_created_print(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_print", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QR Code
      /// 
      /// Locales: en
      static func wallet_qr_code(_: Void = ()) -> String {
        return NSLocalizedString("wallet_qr_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Re-type your password
      /// 
      /// Locales: en
      static func create_wallet_password_bis_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_password_bis_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Received
      /// 
      /// Locales: en
      static func wallet_received(_: Void = ()) -> String {
        return NSLocalizedString("wallet_received", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recent transactions
      /// 
      /// Locales: en
      static func wallet_recent_transactions(_: Void = ()) -> String {
        return NSLocalizedString("wallet_recent_transactions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient's address
      /// 
      /// Locales: en
      static func send_recipient_title(_: Void = ()) -> String {
        return NSLocalizedString("send_recipient_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remember: some time is required for the network to confirm the transaction
      /// 
      /// Locales: en
      static func send_success_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("send_success_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Secure Private Decentralized Untraceable Fungible
      /// 
      /// Locales: en
      static func about_us_tagline(_: Void = ()) -> String {
        return NSLocalizedString("about_us_tagline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See full history
      /// 
      /// Locales: en
      static func wallet_full_history(_: Void = ()) -> String {
        return NSLocalizedString("wallet_full_history", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See the full transaction details on the Blockchain Coin Explorer
      /// 
      /// Locales: en
      static func transaction_details_explorer(_: Void = ()) -> String {
        return NSLocalizedString("transaction_details_explorer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select the wallet to use for this transaction
      /// 
      /// Locales: en
      static func send_select_wallet(_: Void = ()) -> String {
        return NSLocalizedString("send_select_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select the wallet you want to use while mining (the earned coins will be sent to this wallet)
      /// 
      /// Locales: en
      static func mining_select_wallet_title(_: Void = ()) -> String {
        return NSLocalizedString("mining_select_wallet_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en
      static func home_menu_send_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_send_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en
      static func tabs_send(_: Void = ()) -> String {
        return NSLocalizedString("tabs_send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send the coins
      /// 
      /// Locales: en
      static func send_action(_: Void = ()) -> String {
        return NSLocalizedString("send_action", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sending transaction...
      /// 
      /// Locales: en
      static func confirm_transaction_loading(_: Void = ()) -> String {
        return NSLocalizedString("confirm_transaction_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent
      /// 
      /// Locales: en
      static func wallet_sent(_: Void = ()) -> String {
        return NSLocalizedString("wallet_sent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent to:
      /// 
      /// Locales: en
      static func transaction_details_sent_to(_: Void = ()) -> String {
        return NSLocalizedString("transaction_details_sent_to", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Slide to confirm
      /// 
      /// Locales: en
      static func send_confirm_slide_to_confirm(_: Void = ()) -> String {
        return NSLocalizedString("send_confirm_slide_to_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status: %@
      /// 
      /// Locales: en
      static func transaction_details_status(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_status", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Summary
      /// 
      /// Locales: en
      static func send_confirm_title_view(_: Void = ()) -> String {
        return NSLocalizedString("send_confirm_title_view", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The BlockChain Coin has been founded in 2018 by a group of talented friends and partners that has been working together for more than 10 years on IT, smartphone technology, web, API, hardware products, applications and many more. Experimented, smart, ambitious, fun and hard working are some of our main qualities. We love cryptocurrencies, we are early bitcoin investors, we are (still) amazed by the possibilities that the Blockchain technology brings to the world and we want to be a fundamental actor of this revolution. Visit our website to discover our universe, our application, our ecostystem, our roadmap and be a part of it; join us!
      /// 
      /// Locales: en
      static func about_us_content(_: Void = ()) -> String {
        return NSLocalizedString("about_us_content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The specified key is not in the right format or contains invalid data
      /// 
      /// Locales: en
      static func import_wallet_key_invalid_key(_: Void = ()) -> String {
        return NSLocalizedString("import_wallet_key_invalid_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This password will be required each time you make a transaction with someone and to export your private key
      /// 
      /// Locales: en
      static func create_wallet_password_instructions(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_password_instructions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total balance
      /// 
      /// Locales: en
      static func wallet_total_balance(_: Void = ()) -> String {
        return NSLocalizedString("wallet_total_balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total balance: %@
      /// 
      /// Locales: en
      static func wallet_list_item_balance(_ value1: String) -> String {
        return String(format: NSLocalizedString("wallet_list_item_balance", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Transact.
      /// 
      /// Locales: en
      static func tabs_transactions(_: Void = ()) -> String {
        return NSLocalizedString("tabs_transactions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction hash:
      /// 
      /// Locales: en
      static func transaction_details_hash(_: Void = ()) -> String {
        return NSLocalizedString("transaction_details_hash", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en
      static func home_menu_transactions_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_transactions_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfers: %@
      /// 
      /// Locales: en
      static func transaction_details_transfers(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction_details_transfers", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Use QR code
      /// 
      /// Locales: en
      static func send_use_qr_code(_: Void = ()) -> String {
        return NSLocalizedString("send_use_qr_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Very important
      /// 
      /// Locales: en
      static func wallet_created_title_third_line(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_title_third_line", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en
      static func home_menu_wallet_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_wallet_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en
      static func tabs_wallet(_: Void = ()) -> String {
        return NSLocalizedString("tabs_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet #%d
      /// 
      /// Locales: en
      static func wallet_list_item_title(_ value1: Int) -> String {
        return String(format: NSLocalizedString("wallet_list_item_title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You are going to send
      /// 
      /// Locales: en
      static func send_confirm_title(_: Void = ()) -> String {
        return NSLocalizedString("send_confirm_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You don't any wallets with enough funds for this transaction
      /// 
      /// Locales: en
      static func send_no_wallet(_: Void = ()) -> String {
        return NSLocalizedString("send_no_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have no wallet for now
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You must understand that this private key is very sensitive. NEVER SHARE this with anyone. With this key, you can recover your wallet on any computer, smartphone or table. If someone finds or steals it, he will be able to recover your wallet and transfer funds out of it without your knowledge.  The best way to backup your wallet is to print on paper 2 copies of this key and hide them in 2 different safe places. If you lose this key and your wallet is deleted from this device, you will never be able to recover it. Your funds will be lost forever. This key is essential to backup your wallet and funds.
      /// 
      /// Locales: en
      static func wallet_created_infos(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_infos", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You need to create a new wallet or import a wallet using your private key or a QR code
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_instructions(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_instructions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your Blockchain Coins has been sent!
      /// 
      /// Locales: en
      static func send_success_title(_: Void = ()) -> String {
        return NSLocalizedString("send_success_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your address
      /// 
      /// Locales: en
      static func wallet_address(_: Void = ()) -> String {
        return NSLocalizedString("wallet_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your key here
      /// 
      /// Locales: en
      static func import_wallet_key_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("import_wallet_key_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your wallet has been created!
      /// 
      /// Locales: en
      static func wallet_created_title_first_line(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_title_first_line", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your wallet key below
      /// 
      /// Locales: en
      static func wallet_created_qr_code(_: Void = ()) -> String {
        return NSLocalizedString("wallet_created_qr_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: check every transactions
      /// 
      /// Locales: en
      static func home_menu_transactions_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_transactions_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: create, configure, balance
      /// 
      /// Locales: en
      static func home_menu_wallet_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_wallet_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: earn coins in minutes
      /// 
      /// Locales: en
      static func home_menu_mining_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_mining_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: more about us
      /// 
      /// Locales: en
      static func home_menu_about_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_about_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: send coins instantly
      /// 
      /// Locales: en
      static func home_menu_send_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_send_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: www.blockchain-coin.net
      /// 
      /// Locales: en
      static func about_us_url(_: Void = ()) -> String {
        return NSLocalizedString("about_us_url", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
