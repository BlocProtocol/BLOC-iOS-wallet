//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `RobotoCondensed-Bold.ttf`.
    static let robotoCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Bold", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Light.ttf`.
    static let robotoCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Light", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Regular.ttf`.
    static let robotoCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Regular", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "RobotoCondensed-Bold", withExtension: "ttf")`
    static func robotoCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Light", withExtension: "ttf")`
    static func robotoCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Regular", withExtension: "ttf")`
    static func robotoCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `RobotoCondensed-Bold`.
    static let robotoCondensedBold = Rswift.FontResource(fontName: "RobotoCondensed-Bold")
    /// Font `RobotoCondensed-Light`.
    static let robotoCondensedLight = Rswift.FontResource(fontName: "RobotoCondensed-Light")
    /// Font `RobotoCondensed-Regular`.
    static let robotoCondensedRegular = Rswift.FontResource(fontName: "RobotoCondensed-Regular")
    
    /// `UIFont(name: "RobotoCondensed-Bold", size: ...)`
    static func robotoCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedBold, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Light", size: ...)`
    static func robotoCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedLight, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Regular", size: ...)`
    static func robotoCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Regular' could not be loaded, is 'RobotoCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Bold' could not be loaded, is 'RobotoCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Light' could not be loaded, is 'RobotoCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `accessory`.
    static let accessory = Rswift.ImageResource(bundle: R.hostingBundle, name: "accessory")
    /// Image `action-button-bg`.
    static let actionButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "action-button-bg")
    /// Image `add-icon`.
    static let addIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-icon")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `default-bg`.
    static let defaultBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "default-bg")
    /// Image `home-bg`.
    static let homeBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-bg")
    /// Image `logo-small`.
    static let logoSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-small")
    /// Image `logo-text`.
    static let logoText = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-text")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `menu-icon`.
    static let menuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-icon")
    /// Image `nav-bar-bg`.
    static let navBarBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav-bar-bg")
    /// Image `right-arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow")
    /// Image `separator-dash`.
    static let separatorDash = Rswift.ImageResource(bundle: R.hostingBundle, name: "separator-dash")
    /// Image `splash_bg`.
    static let splash_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_bg")
    /// Image `splash_logo`.
    static let splash_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_logo")
    /// Image `tab-bar-about`.
    static let tabBarAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-about")
    /// Image `tab-bar-bg`.
    static let tabBarBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-bg")
    /// Image `tab-bar-marker`.
    static let tabBarMarker = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-marker")
    /// Image `tab-bar-mining`.
    static let tabBarMining = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-mining")
    /// Image `tab-bar-send`.
    static let tabBarSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-send")
    /// Image `tab-bar-transactions`.
    static let tabBarTransactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-transactions")
    /// Image `tab-bar-wallet`.
    static let tabBarWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-wallet")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    
    /// `UIImage(named: "accessory", bundle: ..., traitCollection: ...)`
    static func accessory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accessory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "action-button-bg", bundle: ..., traitCollection: ...)`
    static func actionButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.actionButtonBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add-icon", bundle: ..., traitCollection: ...)`
    static func addIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default-bg", bundle: ..., traitCollection: ...)`
    static func defaultBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home-bg", bundle: ..., traitCollection: ...)`
    static func homeBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-small", bundle: ..., traitCollection: ...)`
    static func logoSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-text", bundle: ..., traitCollection: ...)`
    static func logoText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoText, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu-icon", bundle: ..., traitCollection: ...)`
    static func menuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav-bar-bg", bundle: ..., traitCollection: ...)`
    static func navBarBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navBarBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right-arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "separator-dash", bundle: ..., traitCollection: ...)`
    static func separatorDash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.separatorDash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_bg", bundle: ..., traitCollection: ...)`
    static func splash_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_logo", bundle: ..., traitCollection: ...)`
    static func splash_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-about", bundle: ..., traitCollection: ...)`
    static func tabBarAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-bg", bundle: ..., traitCollection: ...)`
    static func tabBarBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-marker", bundle: ..., traitCollection: ...)`
    static func tabBarMarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarMarker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-mining", bundle: ..., traitCollection: ...)`
    static func tabBarMining(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarMining, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-send", bundle: ..., traitCollection: ...)`
    static func tabBarSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-transactions", bundle: ..., traitCollection: ...)`
    static func tabBarTransactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarTransactions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-wallet", bundle: ..., traitCollection: ...)`
    static func tabBarWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarWallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `RestoreWalletVC`.
    static let restoreWalletVC = _R.nib._RestoreWalletVC()
    
    /// `UINib(name: "RestoreWalletVC", in: bundle)`
    static func restoreWalletVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restoreWalletVC)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      /// en translation: About
      /// 
      /// Locales: en
      static let home_menu_about_title = Rswift.StringResource(key: "home_menu_about_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create a new wallet
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_create = Rswift.StringResource(key: "wallet_list_no_wallet_create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import a wallet (using QR code)
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_import_qr_code = Rswift.StringResource(key: "wallet_list_no_wallet_import_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import a wallet (using private key)
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_import_key = Rswift.StringResource(key: "wallet_list_no_wallet_import_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mining
      /// 
      /// Locales: en
      static let home_menu_mining_title = Rswift.StringResource(key: "home_menu_mining_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mining
      /// 
      /// Locales: en
      static let tabs_mining = Rswift.StringResource(key: "tabs_mining", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en
      static let home_menu_send_title = Rswift.StringResource(key: "home_menu_send_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en
      static let tabs_send = Rswift.StringResource(key: "tabs_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Total balance: %@ BLOC
      /// 
      /// Locales: en
      static let wallet_list_item_balance = Rswift.StringResource(key: "wallet_list_item_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transact.
      /// 
      /// Locales: en
      static let tabs_transactions = Rswift.StringResource(key: "tabs_transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en
      static let home_menu_transactions_title = Rswift.StringResource(key: "home_menu_transactions_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en
      static let home_menu_wallet_title = Rswift.StringResource(key: "home_menu_wallet_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en
      static let tabs_wallet = Rswift.StringResource(key: "tabs_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wallet #%d
      /// 
      /// Locales: en
      static let wallet_list_item_title = Rswift.StringResource(key: "wallet_list_item_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have no wallet for now
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_title = Rswift.StringResource(key: "wallet_list_no_wallet_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You need to create a new wallet or import a wallet using your private key or a QR code
      /// 
      /// Locales: en
      static let wallet_list_no_wallet_instructions = Rswift.StringResource(key: "wallet_list_no_wallet_instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: check every transactions
      /// 
      /// Locales: en
      static let home_menu_transactions_subtitle = Rswift.StringResource(key: "home_menu_transactions_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: create, configure, balance
      /// 
      /// Locales: en
      static let home_menu_wallet_subtitle = Rswift.StringResource(key: "home_menu_wallet_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: earn coins in minutes
      /// 
      /// Locales: en
      static let home_menu_mining_subtitle = Rswift.StringResource(key: "home_menu_mining_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: more about us
      /// 
      /// Locales: en
      static let home_menu_about_subtitle = Rswift.StringResource(key: "home_menu_about_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: send coins instantly
      /// 
      /// Locales: en
      static let home_menu_send_subtitle = Rswift.StringResource(key: "home_menu_send_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: About
      /// 
      /// Locales: en
      static func home_menu_about_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_about_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a new wallet
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_create(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_create", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import a wallet (using QR code)
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_import_qr_code(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_import_qr_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import a wallet (using private key)
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_import_key(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_import_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining
      /// 
      /// Locales: en
      static func home_menu_mining_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_mining_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining
      /// 
      /// Locales: en
      static func tabs_mining(_: Void = ()) -> String {
        return NSLocalizedString("tabs_mining", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en
      static func home_menu_send_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_send_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en
      static func tabs_send(_: Void = ()) -> String {
        return NSLocalizedString("tabs_send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total balance: %@ BLOC
      /// 
      /// Locales: en
      static func wallet_list_item_balance(_ value1: String) -> String {
        return String(format: NSLocalizedString("wallet_list_item_balance", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Transact.
      /// 
      /// Locales: en
      static func tabs_transactions(_: Void = ()) -> String {
        return NSLocalizedString("tabs_transactions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en
      static func home_menu_transactions_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_transactions_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en
      static func home_menu_wallet_title(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_wallet_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en
      static func tabs_wallet(_: Void = ()) -> String {
        return NSLocalizedString("tabs_wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet #%d
      /// 
      /// Locales: en
      static func wallet_list_item_title(_ value1: Int) -> String {
        return String(format: NSLocalizedString("wallet_list_item_title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You have no wallet for now
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You need to create a new wallet or import a wallet using your private key or a QR code
      /// 
      /// Locales: en
      static func wallet_list_no_wallet_instructions(_: Void = ()) -> String {
        return NSLocalizedString("wallet_list_no_wallet_instructions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: check every transactions
      /// 
      /// Locales: en
      static func home_menu_transactions_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_transactions_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: create, configure, balance
      /// 
      /// Locales: en
      static func home_menu_wallet_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_wallet_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: earn coins in minutes
      /// 
      /// Locales: en
      static func home_menu_mining_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_mining_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: more about us
      /// 
      /// Locales: en
      static func home_menu_about_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_about_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: send coins instantly
      /// 
      /// Locales: en
      static func home_menu_send_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("home_menu_send_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _RestoreWalletVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RestoreWalletVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
